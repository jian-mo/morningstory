name: Deploy to Vercel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Fixed domain names for predictable URLs
      API_DOMAIN: "https://morning-story-api.vercel.app"
      WEB_DOMAIN: "https://morning-story-web.vercel.app"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy API to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd apps/api
          
          # Create .vercel directory and project.json dynamically (never committed)
          mkdir -p .vercel
          cat > .vercel/project.json << EOF
          {
            "projectId": "${{ secrets.VERCEL_PROJECT_ID_API }}",
            "orgId": "${{ secrets.VERCEL_ORG_ID }}"
          }
          EOF
          echo "✅ Created project linking file for API"
          
          # Set environment variables from GitHub Secrets
          echo "${{ secrets.DATABASE_URL }}" | vercel env add DATABASE_URL production --force --token $VERCEL_TOKEN
          echo "${{ secrets.JWT_SECRET }}" | vercel env add JWT_SECRET production --force --token $VERCEL_TOKEN
          echo "${{ secrets.ENCRYPTION_KEY }}" | vercel env add ENCRYPTION_KEY production --force --token $VERCEL_TOKEN
          echo "production" | vercel env add NODE_ENV production --force --token $VERCEL_TOKEN
          
          # Use fixed web domain for CORS
          echo "$WEB_DOMAIN" | vercel env add FRONTEND_URL production --force --token $VERCEL_TOKEN
          
          # GitHub Integration (optional)
          if [ -n "${{ secrets.GH_CLIENT_ID }}" ]; then
            echo "${{ secrets.GH_CLIENT_ID }}" | vercel env add GITHUB_CLIENT_ID production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GH_CLIENT_SECRET }}" | vercel env add GITHUB_CLIENT_SECRET production --force --token $VERCEL_TOKEN
          fi
          
          # GitHub App (optional)
          if [ -n "${{ secrets.GH_APP_ID }}" ]; then
            echo "${{ secrets.GH_APP_ID }}" | vercel env add GITHUB_APP_ID production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GH_APP_NAME }}" | vercel env add GITHUB_APP_NAME production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GH_WEBHOOK_SECRET }}" | vercel env add GITHUB_WEBHOOK_SECRET production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GH_APP_PRIVATE_KEY }}" | vercel env add GITHUB_APP_PRIVATE_KEY production --force --token $VERCEL_TOKEN
          fi
          
          # Deploy with proper project linking
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel --prod --token $VERCEL_TOKEN --yes
          else
            vercel --token $VERCEL_TOKEN --yes
          fi
          
          echo "🚀 API deployed to: $API_DOMAIN"

      - name: Deploy Web to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd apps/web
          
          # Create .vercel directory and project.json dynamically (never committed)
          mkdir -p .vercel
          cat > .vercel/project.json << EOF
          {
            "projectId": "${{ secrets.VERCEL_PROJECT_ID_WEB }}",
            "orgId": "${{ secrets.VERCEL_ORG_ID }}"
          }
          EOF
          echo "✅ Created project linking file for Web"
          
          # Use fixed API domain
          echo "Setting VITE_API_URL to: $API_DOMAIN"
          echo "$API_DOMAIN" | vercel env add VITE_API_URL production --force --token $VERCEL_TOKEN
          
          # Deploy with proper project linking
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel --prod --token $VERCEL_TOKEN --yes
          else
            vercel --token $VERCEL_TOKEN --yes
          fi
          
          echo "🌐 Web app deployed to: $WEB_DOMAIN"

      - name: Comment PR with deployment URLs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `🚀 **Deployment Preview**
            
            📱 **Web App**: ${{ env.WEB_DOMAIN }}
            🔧 **API**: ${{ env.API_DOMAIN }}
            
            **Configuration:**
            - ✅ Fixed domain names (predictable URLs)
            - ✅ Frontend connects to: ${{ env.API_DOMAIN }}
            - ✅ API accepts requests from: ${{ env.WEB_DOMAIN }}
            - ✅ No localhost dependencies
            
            *Deployed from commit ${context.payload.pull_request.head.sha.substring(0, 7)}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          
      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Complete!"
          echo "- 🚀 **API**: $API_DOMAIN"
          echo "- 🌐 **Web**: $WEB_DOMAIN" 
          echo "- ✅ **Fixed Domains**: Predictable, easy-to-remember URLs"
          echo "- ✅ **API Connection**: $WEB_DOMAIN → $API_DOMAIN"
          echo "- ✅ **No Manual Config**: Everything automated"