name: Deploy to Vercel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy API to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID_API: ${{ secrets.VERCEL_PROJECT_ID_API }}
        run: |
          cd apps/api
          
          # Set environment variables from GitHub Secrets
          echo "${{ secrets.DATABASE_URL }}" | vercel env add DATABASE_URL production --force --token $VERCEL_TOKEN
          echo "${{ secrets.JWT_SECRET }}" | vercel env add JWT_SECRET production --force --token $VERCEL_TOKEN
          echo "${{ secrets.ENCRYPTION_KEY }}" | vercel env add ENCRYPTION_KEY production --force --token $VERCEL_TOKEN
          echo "production" | vercel env add NODE_ENV production --force --token $VERCEL_TOKEN
          
          # Frontend URL for CORS and OAuth callbacks
          if [ -n "${{ secrets.FRONTEND_URL }}" ]; then
            echo "${{ secrets.FRONTEND_URL }}" | vercel env add FRONTEND_URL production --force --token $VERCEL_TOKEN
          fi
          
          # GitHub Integration (optional)
          if [ -n "${{ secrets.GITHUB_CLIENT_ID }}" ]; then
            echo "${{ secrets.GITHUB_CLIENT_ID }}" | vercel env add GITHUB_CLIENT_ID production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GITHUB_CLIENT_SECRET }}" | vercel env add GITHUB_CLIENT_SECRET production --force --token $VERCEL_TOKEN
          fi
          
          # GitHub App (optional)
          if [ -n "${{ secrets.GITHUB_APP_ID }}" ]; then
            echo "${{ secrets.GITHUB_APP_ID }}" | vercel env add GITHUB_APP_ID production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GITHUB_APP_NAME }}" | vercel env add GITHUB_APP_NAME production --force --token $VERCEL_TOKEN
            echo "${{ secrets.GITHUB_APP_PRIVATE_KEY }}" | vercel env add GITHUB_APP_PRIVATE_KEY production --force --token $VERCEL_TOKEN
          fi
          
          # Deploy
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel --prod --token $VERCEL_TOKEN --yes
          else
            vercel --token $VERCEL_TOKEN --yes
          fi

      - name: Deploy Web to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID_WEB: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
        run: |
          cd apps/web
          
          # Set API URL from deployed API or custom domain
          API_URL="${{ secrets.API_URL || 'https://morning-story-api.vercel.app' }}"
          echo "$API_URL" | vercel env add VITE_API_URL production --force --token $VERCEL_TOKEN
          
          # Deploy
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel --prod --token $VERCEL_TOKEN --yes
          else
            vercel --token $VERCEL_TOKEN --yes
          fi

      - name: Comment PR with deployment URLs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            if (deployments.length > 0) {
              const webUrl = deployments.find(d => d.environment.includes('web'))?.payload?.web_url;
              const apiUrl = deployments.find(d => d.environment.includes('api'))?.payload?.web_url;
              
              const comment = `ðŸš€ **Deployment Preview**
              
              ${webUrl ? `ðŸ“± **Web App**: ${webUrl}` : ''}
              ${apiUrl ? `ðŸ”§ **API**: ${apiUrl}` : ''}
              
              *Deployed from commit ${context.payload.pull_request.head.sha.substring(0, 7)}*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }